{"version":3,"sources":["components/Card/Card.jsx","components/DrawCard/DrawCard.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","eng","han","pin","DrawCard","onClick","this","drawNewCard","Component","cardData","require","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","cards","state","currentCard","getRandomCard","Math","floor","random","length","filter","card","setState","_this2","components_Card_Card","components_DrawCard_DrawCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gyCAiBeA,eAdF,SAACC,GAAD,OACTC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,MAEpCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMM,KAC9BL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMO,UCEjCC,0LARP,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,UAAQM,QAASC,KAAKV,MAAMW,YAAaP,UAAU,OAAnD,qBAJOQ,cCEjBC,EAAWC,EAAQ,IAuDVC,cAhDb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IACXC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,QAJFY,MAAQT,EAASS,MAMfN,EAAKO,MAAQ,CACXC,YAAaR,EAAKS,cAAcT,EAAKM,QAJ5BN,6EASGM,GAMZ,OAFaA,EAFOI,KAAKC,MAAMD,KAAKE,SAAWN,EAAMO,6CAQzCL,EAAaF,GAErBA,EAAQA,EAAMQ,OAAQ,SAAAC,GACpB,OAAOA,IAASP,IAGpBd,KAAKsB,SAAS,CACZR,YAAad,KAAKe,cAAcH,sCAI/B,IAAAW,EAAAvB,KACP,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAC+B,EAAD,CACE7B,IAAKK,KAAKa,MAAMC,YAAYnB,IAC5BC,IAAKI,KAAKa,MAAMC,YAAYlB,IAC5BC,IAAKG,KAAKa,MAAMC,YAAYjB,OAGhCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEbH,EAAAC,EAAAC,cAACgC,EAAD,CAAUxB,YAAa,kBAAMsB,EAAKtB,YAAYsB,EAAKV,MAAMC,YAAaS,EAAKX,mBA/CnEV,aCGEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a487813.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => (\n    <div className=\"card-container\">\n        <div className=\"card\">\n            <div className=\"front\">\n                <div className=\"english\">{props.eng}</div>\n            </div>\n            <div className=\"front back\">\n                <div className=\"hanzi\">{props.han}</div>\n                <div className=\"pinying\">{props.pin}</div>\n            </div>\n        </div>\n    </div>\n)\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './DrawCard.css';\n\nclass DrawCard extends Component{\n    render(){\n        return(\n            <div className=\"buttonContainer\">\n                <button onClick={this.props.drawNewCard} className=\"btn\">Draw Card</button>\n            </div>\n        )\n    };\n}\n\nexport default DrawCard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/Card/Card'\nimport DrawCard from './components/DrawCard/DrawCard';\n\nconst cardData = require('./data/data.json')\n\nclass App extends Component {\n\n  cards = cardData.cards;\n\n  // Initilise State\n  constructor(){\n    super()\n    // Setting Current Card to a random card for the array of cards\n    this.state = {\n      currentCard: this.getRandomCard(this.cards)\n    }\n  }\n\n  // Takes in array of cards\n    getRandomCard(cards){\n      // Creates a number to randomly index\n      const randomIndex = Math.floor(Math.random() * cards.length);\n      // Setting card to the randomly indexed data\n      const card = cards[randomIndex];\n      // Returns card back\n      return card;\n      }\n\n      // Takes in 3 variables\n      drawNewCard(currentCard, cards){\n          // reutrning cards that area NOT the current card\n          cards = cards.filter( card => {\n            return card !== currentCard;\n           });\n          //  Setting state to new random card\n        this.setState({\n          currentCard: this.getRandomCard(cards)\n        })\n      }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"cardRow\">\n          <Card\n            eng={this.state.currentCard.eng}\n            han={this.state.currentCard.han}\n            pin={this.state.currentCard.pin}\n            />\n        </div>\n        <div className=\"buttonRow\">\n        {/* Fat arrow so that it will NEED to be clicked before used, otherwise will be stuck in infinite loop */}\n          <DrawCard drawNewCard={() => this.drawNewCard(this.state.currentCard, this.cards)} />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}